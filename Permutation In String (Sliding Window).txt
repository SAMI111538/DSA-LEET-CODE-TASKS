class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int len1 = s1.length();
        int len2 = s2.length();

        if (len1 > len2) return false;

        vector<int> count1(26, 0);
        vector<int> count2(26, 0);

        // Fill the frequency map for s1 and the first window of s2
        for (int i = 0; i < len1; ++i) {
            count1[s1[i] - 'a']++;
            count2[s2[i] - 'a']++;
        }

        // Check if the first window is a permutation
        if (count1 == count2) return true;

        // Slide the window over s2
        for (int i = len1; i < len2; ++i) {
            count2[s2[i] - 'a']++;
            count2[s2[i - len1] - 'a']--;

            // Check if the current window is a permutation
            if (count1 == count2) return true;
        }

        return false;
    }
};
